package org.framework.verify.verify5;

import java.io.InputStream;
import java.io.ObjectInputStream;
import java.math.BigInteger;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

public class RSA_Encrypt {

	//用公钥解密，对比是否被篡改
	public static String decryption(String str){
		try {
			BigInteger c = new BigInteger(str);
			//FileInputStream f = new FileInputStream(System.getProperty("user.dir") + "/cert/Android_Private.pfx");
			ClassLoader cl = RSA_Encrypt.class.getClassLoader();
			InputStream f = cl.getResourceAsStream("org/framework/verify/verify5/Miugo_Public.cer");
			ObjectInputStream b = new ObjectInputStream(f);
			RSAPrivateKey prk = (RSAPrivateKey) b.readObject();
			BigInteger d = prk.getPrivateExponent();
			BigInteger n = prk.getModulus();
			BigInteger m = c.modPow(d, n);
			byte[] mt = m.toByteArray();
			String st = new String(mt, "UTF-8").trim();
			return new String(Base64.decodeBase64(st), "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	//用私钥加密
	public static String encryption(String str){
		try {
			str = Base64.encodeBase64String(str.getBytes("UTF-8"));
			//FileInputStream f = new FileInputStream(System.getProperty("user.dir") + "/cert/Android_Public.cer");
			ClassLoader cl = RSA_Encrypt.class.getClassLoader();
			InputStream f = cl.getResourceAsStream("org/framework/verify/verify5/Miugo_Private.pfx");
			ObjectInputStream b = new ObjectInputStream(f);
			RSAPublicKey pbk = (RSAPublicKey) b.readObject();
			BigInteger e = pbk.getPublicExponent();
			BigInteger n = pbk.getModulus();
			byte ptext[] = str.getBytes("UTF-8");
			BigInteger m = new BigInteger(ptext);
			BigInteger c = m.modPow(e, n);
			return c.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public static void main(String args[]) throws Exception {
		String str = "购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购妙购啊啊啊啊去";
		System.err.println(str.length());
		String sign = encryption(str);
		System.err.println(sign);
		System.err.println(decryption(sign));
		//System.err.println(MD5.getEncodeString("12988606313124061047719462026192937393026741913620867694025138859952137290479005558182041458328107376933702490547659012199822736511660667549913505164426219692339411911420818890344116955778396828814077598038230049813870352257665822491777361279976927717433528727560925160816570487090920105609398478125278759857680230273293188911953273422844467587401206618525634750900962642939268129890253652041469471218234511165276278297219704951257853049401242540107584450309216681965000089321072639148801403137974680010046051223546893408337068771802383399510255301463275485879885618852288252805454191874749341697007211242187337032442|17557568015379702236940183380871975161665051326324596213347897753583828535631202066979115762996185110002811068466422884342299220637453980719047330369416844023883563469892868825980686303729146904091174685087849611685263738280936476388439606781737367973435994148121501586808709640327307950394238772405267673898519921831375794247974050189338860892261706580108359057785275391683895812903501826682590324209307395164648279968713601654795805015467185654829129343574141639670978449017154981197051200737203272737525930874591891655105260318924175638257536642321957024873972811782651123309973209861955746290361765076063145128402|17557568015379702236940183380871975161665051326324596213347897753583828535631202066979115762996185110002811068466422884342299220637453980719047330369416844023883563469892868825980686303729146904091174685087849611685263738280936476388439606781737367973435994148121501586808709640327307950394238772405267673898519921831375794247974050189338860892261706580108359057785275391683895812903501826682590324209307395164648279968713601654795805015467185654829129343574141639670978449017154981197051200737203272737525930874591891655105260318924175638257536642321957024873972811782651123309973209861955746290361765076063145128466|17557568015379702236940183380871975161665051326324596213347897753583828535631202066979115762996185110002811068466422884342299220637453980719047330369416844023883563469892868825980686303729146904091174685087849611685263738280936476388439606781737367973435994148121501586808709640327307950394238772405267673898519921831375794247974050189338860892261706580108359057785275391683895812903501826682590324209307395164648279968713601654795805015467185654829129343574141639670978449017154981197051200737203272737525930874591891655105260318924175638257536642325557024873972811782651123309973209861955746290361765076063145128406|17557568015379702236940183380871975161665051326324596213347897753583828535631202066979115762996185110002811068466422884342299220637453980719047330369416844023883563469892868825980686303729146904091174685087849611685263738280936476388439606781737367973435994148121501586808709640327307950394238772405267673898519921831375794247974050189338860892261706580108359057785275391683895812903501826682590324209307395164648279968713601654795805015467185654829129343574141639670978449017154981197051200737203272737525930874591891655105260318924175638257536642321957024873972811782651123309973209861955746290361765076063145128401"));
	}
}
